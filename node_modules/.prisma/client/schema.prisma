// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  encryptedPassword String
  profile           UserProfile?
  createdAt         DateTime       @default(now())
  writtenTwitts     Twitt[]        @relation(name: "writtenTwitts")
  comments          Comment[]
  bookmark          BookMarkPost[]
  followers         Follow[]       @relation("follower")
  following         Follow[]       @relation("following")
}

model UserProfile {
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  nickname    String?  @unique
  description String?
  updatedAt   DateTime @updatedAt
}

model Follow {
  follower    User     @relation("following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("follower", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Twitt {
  id           Int            @id @default(autoincrement())
  author       User           @relation(name: "writtenTwitts", fields: [authorId], references: [id])
  authorId     Int
  title        String
  content      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  bookmarkPost BookMarkPost[]
  comments     Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  twitt     Twitt    @relation(fields: [twiitId], references: [id])
  twiitId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookMarkPost {
  id        Int      @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  twitt     Twitt    @relation(fields: [twittId], references: [id])
  twittId   Int
  createdAt DateTime @default(now())

  @@unique([userId, twittId])
}
